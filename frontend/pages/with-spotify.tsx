import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { toTopVariants } from "../src/common/AniVarients";
import useSpotifyAuth from "../src/utils/useSpotifyAuth";
import SpotifyWebApi from "spotify-web-api-node";
import SpotifyApi from "../pages/api/spotifyApi";
import { setAcessToken, setLogin, setUserSpotifyId, setPopupModal } from "../store/actionCreators/systemAction";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "../store/reducers";


const WithSpotify: NextPage = () => {
  const dispatch = useDispatch();
  const { accessToken, userSpotifyId } = useSelector(
    (state: RootState) => state.systemReducer
  );
  const [code, setCode] = useState("");
  const [topArtists, setTopArtists] = useState([]);
  const [topTracks, setTopTracks] = useState([]);
  const spotifyApi = new SpotifyWebApi({
    clientId: process.env.SPOTIFY_CLIENT,
  });
  const spotifyToken = useSpotifyAuth(code);

  useEffect(() => {
    const newCode = new URLSearchParams(window.location.search).get("code");
    setCode(newCode);
  }, []);

  useEffect(() => {
    if (spotifyToken?.length > 0) {
      dispatch(setAcessToken(spotifyToken));
      dispatch(setLogin());
    }
  }, [spotifyToken]);
  const handleGetMyTop = async () => {
    spotifyApi.setAccessToken(accessToken);

    // Get the authenticated user
    spotifyApi.getMe().then(
      function (data) {
        console.log("getUserInfo", data.body);
        dispatch(setUserSpotifyId(data.body.id))
      },
      function (err) {
        console.log("Something went wrong!", err);
        dispatch(setPopupModal("login"));
      }
    );

    /* Get a User’s Top Artists*/
    spotifyApi.getMyTopArtists().then(
      function (data) {
        let topArtists = data.body.items;
        setTopArtists(topArtists);
      },
      function (err) {
        console.log("Something went wrong!", err);
      }
    );

    /* Get a User’s Top Tracks*/
    spotifyApi.getMyTopTracks().then(
      function (data) {
        let topTracks = data.body.items;
        setTopTracks(topTracks);
      },
      function (err) {
        console.log("Something went wrong!", err);
      }
    );
  };

  return (
    <div className="cs-main-bg-theme">
      <Head>
        <title>SameVibes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <motion.div
        className="no-scrollbar container mx-auto h-full overflow-y-auto pb-16 pt-16"
        initial="initial"
        animate="enter"
        exit="exit"
        variants={toTopVariants}
      >
        <div className="cs-block-style-white-theme dark:cs-block-style-grey-900 my-8 flex flex-col p-8">
          <div className="flex justify-center">
            <div
              className="cs-border-btn-t-100 my-8 w-fit cursor-pointer rounded-xl px-2 py-1 text-lg font-medium text-gray-400 transition-colors duration-300 dark:text-gray-400 dark:hover:text-white"
              onClick={handleGetMyTop}
            >
              Get My Profile
            </div>
          </div>
          <div className="flex justify-around">
            <div className="flex flex-col">
              {topArtists.map((artist, i) => {
                return (
                  <div key={`artist-${i}`}>
                    {i + 1}.<span> {artist.name}</span>
                  </div>
                );
              })}
            </div>
            <div className="flex flex-col">
              <div className="h5 mb-4">Listened the most</div>
              {topTracks.map((track, i) => {
                return (
                  <div key={`track-${i}`} className="mb-3 flex">
                    <img
                      src={track.album.images[2].url}
                      width={32}
                      height={32}
                      alt="album cover"
                      className="mr-4"
                    ></img>
                    {i + 1}.<span className="mr-1"> {track.name} </span> -
                    <span className="ml-1 text-gray-400">
                      {" "}
                      {track.artists[0].name}
                    </span>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default WithSpotify;
